
import java.awt.Component;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author nxuma
 */
public class customerHome extends javax.swing.JFrame {

    /**
     * Creates new form customerHome
     */
    public customerHome() {
        initComponents();

        displayProd();
        displayCartProd();

    }
    
            private List<ImageIcon> selectedImages = new ArrayList<>();
        
    class ImageTableCellRenderer extends DefaultTableCellRenderer {
    @Override
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
        JLabel label = new JLabel();
        if (value instanceof byte[]) {
            byte[] imageBytes = (byte[]) value;
            ImageIcon imageIcon = new ImageIcon(imageBytes);
            label.setIcon(imageIcon);
            label.setHorizontalAlignment(JLabel.CENTER);
        }
        return label;
    }
}

public void displayProd() {
    ProductManageable productManageable = new ProductManageable(null, null, 0, 0.0, null); // Create an instance

    // Call the displayProducts method to populate the table
    productManageable.displayProducts(jTable1); // Assuming jTable1 is the table where you want to display products

    // Set a custom cell renderer for the image column (assuming it's at index 1)
   jTable1.getColumnModel().getColumn(1).setCellRenderer(new ImageTableCellRenderer());

    // Set the row height to accommodate images (adjust the height as needed)
    int rowHeight = 60; // Set the desired row height
    jTable1.setRowHeight(rowHeight);
}

private byte[] imageToByteArray(ImageIcon icon) {
    BufferedImage bufferedImage = new BufferedImage(
        icon.getIconWidth(),
        icon.getIconHeight(),
        BufferedImage.TYPE_INT_RGB
    );

    Graphics g = bufferedImage.createGraphics();
    // Paint the ImageIcon onto the BufferedImage
    icon.paintIcon(null, g, 0, 0);
    g.dispose();

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    try {
        ImageIO.write(bufferedImage, "jpg", baos);
    } catch (IOException e) {
        e.printStackTrace();
    }

    return baos.toByteArray();
}


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        buyProduct = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        cost = new javax.swing.JLabel();
        payForProd = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        userEmail = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "product name", "product ", "product_quantity available", "price"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        buyProduct.setText("buy product");
        buyProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyProductActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(525, 525, 525)
                .addComponent(buyProduct)
                .addContainerGap(603, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(41, 41, 41)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1149, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(33, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(421, Short.MAX_VALUE)
                .addComponent(buyProduct)
                .addGap(36, 36, 36))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(63, 63, 63)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(81, Short.MAX_VALUE)))
        );

        jTabbedPane1.addTab("tab1", jPanel1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "product name", "quantity bought", "total price"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        cost.setText(".................");

        payForProd.setText("PAY");
        payForProd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payForProdActionPerformed(evt);
            }
        });

        jLabel1.setText("Total Cost: R");

        jButton1.setText("REMOVE PRODUCT FROM CART");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("clear cart");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton4.setText("UPDATE PRODUCT QUANTITY");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(132, 132, 132)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 907, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(246, 246, 246)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(payForProd, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(55, 55, 55)
                                .addComponent(jButton1))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(98, 98, 98)
                                .addComponent(cost)))
                        .addGap(45, 45, 45)
                        .addComponent(jButton2)
                        .addGap(51, 51, 51)
                        .addComponent(jButton4)))
                .addContainerGap(184, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cost)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(payForProd)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton4))
                .addContainerGap())
        );

        jTabbedPane1.addTab("tab2", jPanel2);

        userEmail.setText("user@gmail.com");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(userEmail)
                .addGap(565, 565, 565))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(userEmail)
                .addGap(28, 28, 28)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 515, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    void displayCartProd(){
     ProductManageable productManager = new ProductManageable("", null, 0, 0.0, "");
     productManager.displayProductsInCart(userEmail.getText(), jTable2, cost);
    }
    private void buyProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyProductActionPerformed
       // Get the selected row index from the jTable1
    int selectedRowIndex = jTable1.getSelectedRow();

    // Check if a row is selected
    if (selectedRowIndex != -1) {
        // Get the selected product name from the table
        String selectedProductName = jTable1.getValueAt(selectedRowIndex, 0).toString();

        // Prompt the user to enter the quantity they want to buy
        String quantityString = JOptionPane.showInputDialog("Enter the quantity you want to buy:");

        if (quantityString != null) {
            try {
                // Convert the user's input to an integer
                int quantityBought = Integer.parseInt(quantityString);

                // Get the user email from the userEmail label
                String uuserEmail = userEmail.getText(); // Make sure userEmail is a valid reference in your code

                // Create an instance of ProductManageable
                ProductManageable productManager = new ProductManageable("", null, 0, 0.0, "");

                // Call the addProductToCart method to add the product to the cart
                productManager.addProductToCart(selectedProductName, quantityBought, uuserEmail);
                displayProd();
                displayCartProd();
            } catch (NumberFormatException e) {
                // Handle invalid input (non-integer) for quantity
                JOptionPane.showMessageDialog(null, "Invalid input for quantity. Please enter a valid number.");
            }
        }
    } else {
        // No row is selected, display an error message or handle accordingly
        JOptionPane.showMessageDialog(null, "Please select a product to buy.");
    }
}

// Helper method to extract the total cost value from the label text
private double extractTotalCost(String totalCostText) {
    // Assuming the label text is in the format "Total Cost: RXXX.XX" where XXX.XX is the total cost
    String[] parts = totalCostText.split(" ");
    if (parts.length >= 2) {
        try {
            return Double.parseDouble(parts[2].substring(1)); // Extract and parse the numeric part
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }
    }
    return 0.0; // Default to 0.0 if extraction fails
    }//GEN-LAST:event_buyProductActionPerformed

public String generatePaymentSlip(String userEmail, double totalCost, double cashAmount, double change) {
    // Create a formatted payment slip
    String slip = "Payment Slip\n\n";
    slip += "User Email: " + userEmail + "\n";
    slip += "Total Cost: R" + totalCost + "\n";
    slip += "Cash Amount: R" + cashAmount + "\n";
    slip += "Change: R" + change + "\n";
    
    return slip;
}

    private void payForProdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payForProdActionPerformed
   
    // Retrieve the total cost displayed in the label
String totalCostText = cost.getText();
double totalCost = Double.parseDouble(totalCostText);


if (totalCost <= 0) {
    JOptionPane.showMessageDialog(null, "No items in the cart. Nothing to pay for.");
    return;
}

// Prompt the user to enter the cash amount
String cashString = JOptionPane.showInputDialog("Enter the cash amount:");

if (cashString != null && !cashString.isEmpty()) {
    try {
        // Compare the entered cash amount with the total cost
        double cashAmount = Double.parseDouble(cashString);

        if (cashAmount >= totalCost) {
            // Proceed with the payment and update quantities in the products table
            ProductManageable productManager = new ProductManageable("", null, 0, 0.0, "");
            boolean paymentSuccessful = productManager.payForProducts(userEmail.getText());

            if (paymentSuccessful) {
                double change = cashAmount - totalCost;
                JOptionPane.showMessageDialog(null, "Payment successful. Thank you!");
                JOptionPane.showMessageDialog(null, "Change: R" + change); // Display the change
                displayProd();
                displayCartProd();
                

String paymentSlip = generatePaymentSlip(userEmail.getText(), totalCost, cashAmount, change);

// Display a download link to the user
int choice = JOptionPane.showConfirmDialog(null, "Payment successful. Do you want to download the payment slip?", "Download Payment Slip", JOptionPane.YES_NO_OPTION);

if (choice == JOptionPane.YES_OPTION) {
    // Save the payment slip content to a file (e.g., a text file)
    try {
        FileWriter writer = new FileWriter("PaymentSlip.txt");
        writer.write(paymentSlip);
        writer.close();
        
        JOptionPane.showMessageDialog(null, "Payment slip downloaded as PaymentSlip.txt.");
    } catch (IOException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Failed to download payment slip. Please try again.");
    }
}
            } else {
                JOptionPane.showMessageDialog(null, "Payment failed. Please try again.");
            }
        } else {
            // Display a message indicating insufficient funds
            JOptionPane.showMessageDialog(null, "Insufficient funds. Please enter a sufficient amount.");
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Invalid input for cash amount. Please enter a valid number.");
    }
}

}

// You need to implement this method to calculate the total cost of items in the cart
private double calculateTotalCost() {
    // Implement logic to calculate the total cost
    // You can retrieve data from the cart and products tables to calculate this
    return 0.0; // Placeholder, replace with your logic
    }//GEN-LAST:event_payForProdActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int selectedRow = jTable2.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(null, "Please select a product to remove from the cart.");
        return;
    }

    String productName = (String) jTable2.getValueAt(selectedRow, 0);
    int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to remove '" + productName + "' from the cart?", "Confirm Removal", JOptionPane.YES_NO_OPTION);

    if (confirm == JOptionPane.YES_OPTION) {
        ProductManageable productManager = new ProductManageable("", null, 0, 0.0, "");
        productManager.removeProductFromCart(productName,  userEmail.getText());
                displayProd();
                displayCartProd();

     
    }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

         int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to clear cart " , "cart clearance", JOptionPane.YES_NO_OPTION);

    if (confirm == JOptionPane.YES_OPTION) {
        ProductManageable productManager = new ProductManageable("", null, 0, 0.0, "");
        productManager.clearCart(userEmail.getText());
                displayProd();
                displayCartProd();

     
    }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
           int selectedRow = jTable2.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(null, "Please select a product to UPDATE from the cart.");
        return;
    }

    String productName = (String) jTable2.getValueAt(selectedRow, 0);
    int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to change the quantity of '" + productName, "UPDATE ", JOptionPane.YES_NO_OPTION);

    if (confirm == JOptionPane.YES_OPTION) {
        ProductManageable productManager = new ProductManageable("", null, 0, 0.0, "");
        
        String quantity = JOptionPane.showInputDialog("Enter the quantity you now want:");
        
           int newQuantity = Integer.parseInt(quantity);


        productManager.updateQuantityInCart( userEmail.getText(),  productName, newQuantity );
                displayProd();
                displayCartProd();

     
    }
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(customerHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(customerHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(customerHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(customerHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new customerHome().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buyProduct;
    private javax.swing.JLabel cost;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JButton payForProd;
    private javax.swing.JLabel userEmail;
    // End of variables declaration//GEN-END:variables
}
